1 需求分析：
实现一个能够实时处理金融交易并更新账户余额的服务。
每笔交易应包括一个唯一的交易ID、源账户号码、目标账户号码、金额和时间戳。
服务应能够处理并发交易并相应地更新余额。

场景：转账，要求高一致性，高性能。
业务规则分析：账号余额不能转成负数;同一笔转账只能成功一次（不重不漏）。

2 方案设计
高一致性，通过mysql做锁比较合理，悲观锁性能差，决策使用乐观锁。

方案一：
一致性：一个事务，乐观锁转出余额，成功则同事务记录流水，转入账号余额增加。
幂等：客户端发起转账，需要传唯一id用于幂等，使用分布式缓存防重入。
优点：从技术角度，db mysql，事务隔离是rc，仅更新相同记录时有行锁，高一致性高性能；部署简单，一个接口，不需要复杂设计。
缺点：不匹配真实业务，扩展性低，为做题而做题。

方案二：
一致性：步骤一：转出账号的金额锁定和流水记录，之后发送消息；步骤二：异步消费；步骤三：定时轮询补偿；
幂等：客户端发起时传入的渠道事务id，用于保证顾客交易幂等；内部流水唯一事务id，用于后续交互及幂等。
优点：匹配实际业务，扩展性强。
缺点：场景多导致工作量大，组件多导致运维复杂及占用有限资源，并需要维护组件高可用高性能。

综合看成本，选择方案一，仅做题。

3 部署架构
题目中要求部署在云服务商的k8s集群，故尝试使用阿里云ACK。但阿里云ACK，仅集群管理费用减免，集群下的ECS均需要收费。
如果使用ACK，则不符合考官要求仅使用免费资源的限制，故pass该方案。

选择方案：使用阿里云免费ECS，在ECS上部署k8s，通过service管理springboot应用，ingress-nginx配置nodePort，暴露服务。
持久化使用阿里云RDS，分布式缓存使用阿里云云数据库Tair（兼容Redis）

合理架构应该是3台ECS，3主（配额无法申请更多，理想是3主+N工作节点），但时间及熟练度原因，仅完成单节点集群，部署配置文件列表：
IngressClass.yaml
ingress.yaml
nginx-config.yaml
app-pod.yaml

请求链路：jmeter流量  -> ECS公网ip& ingress-nginx 监听端口 -> service -> Deployment（springboot）转账接口

4部署
A 本地打包 mvn clean package，生成jar
B 运行dockerFile，生成镜像
C 打标签上传阿里云容器镜像服务器
D ecs中，删除pod，自动创建新实例 
因赶进度，本次纯手工，未集成ci/cd，后续集成。

5 测试
5.1 材料清单：
A 单测及覆盖率：测试类TestTransfer，doc/覆盖率.jpg
B jmeter用例：doc/测试计划2.jmx
C 弹性测试:
D 性能测试:

5.2 如何测试
A 启动用例init1，初始化测试账号金额；
B 加载jmeter用例，run用例查看报告
